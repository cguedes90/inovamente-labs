// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  username  String   @unique
  password  String
  name      String
  email     String   @unique
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([username])
  @@index([isActive])
  @@map("admins")
}

model Client {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  company   String?
  phone     String?
  isActive  Boolean  @default(true)
  lastLogin DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tickets Ticket[]

  @@index([email])
  @@index([isActive])
  @@index([createdAt])
  @@index([company])
  @@map("clients")
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String       @db.Text
  status      TicketStatus @default(ABERTO)
  priority    Priority     @default(MEDIA)
  category    String
  clientId    String
  assignedTo  String?      // Para futuro: ID do admin responsável
  resolvedAt  DateTime?    // Quando foi resolvido
  closedAt    DateTime?    // Quando foi fechado
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  client   Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  messages Message[]

  @@index([status])
  @@index([priority])
  @@index([category])
  @@index([clientId])
  @@index([createdAt])
  @@index([assignedTo])
  @@index([resolvedAt])
  @@map("tickets")
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  author    String
  authorId  String?  // ID do autor (client ou admin)
  isAdmin   Boolean  @default(false)
  ticketId  String
  readAt    DateTime? // Para controle de leitura
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ticket Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([authorId])
  @@index([createdAt])
  @@index([isAdmin])
  @@map("messages")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  excerpt   String
  slug      String   @unique
  image     String?
  category  String
  author    String   @default("Equipe InovaMente")
  published Boolean  @default(true)
  featured  Boolean  @default(false) // Para posts em destaque
  views     Int      @default(0)     // Contador de visualizações
  readTime  String
  seoTitle  String?  // Título otimizado para SEO
  seoDescription String? // Meta description para SEO
  tags      String[] // Array de tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
  @@index([published])
  @@index([featured])
  @@index([category])
  @@index([createdAt])
  @@index([views])
  @@map("blog_posts")
}

model ChatConversation {
  id        String             @id @default(cuid())
  sessionId String             @unique
  name      String?
  email     String?
  phone     String?
  company   String?
  status    ConversationStatus @default(ACTIVE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  messages ChatMessage[]

  @@index([sessionId])
  @@index([status])
  @@index([createdAt])
  @@index([email])
  @@map("chat_conversations")
}

model ChatMessage {
  id             String      @id @default(cuid())
  conversationId String
  content        String      @db.Text
  isBot          Boolean     @default(false)
  messageType    MessageType @default(TEXT)
  metadata       Json?       // Para dados adicionais (botões, etc.)
  createdAt      DateTime    @default(now())

  conversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([createdAt])
  @@index([isBot])
  @@map("chat_messages")
}

model ContactForm {
  id        String        @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String        @db.Text
  phone     String?
  company   String?
  status    ContactStatus @default(PENDING)
  priority  Priority      @default(MEDIA)
  assignedTo String?      // Admin responsável
  respondedAt DateTime?   // Quando foi respondido
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@index([email])
  @@index([status])
  @@index([priority])
  @@index([subject])
  @@index([createdAt])
  @@index([assignedTo])
  @@map("contact_forms")
}

// Modelo para auditoria de ações administrativas
model AuditLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource  String   // tickets, clients, etc.
  resourceId String? // ID do recurso afetado
  details   Json?    // Detalhes da ação
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([adminId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@map("audit_logs")
}

// Modelo para configurações do sistema
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  type      String   // STRING, NUMBER, BOOLEAN, JSON
  category  String   // GENERAL, EMAIL, SECURITY, etc.
  isPublic  Boolean  @default(false) // Se pode ser acessado pelo frontend
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([key])
  @@index([category])
  @@index([isPublic])
  @@map("system_configs")
}

// Modelo para notificações
model Notification {
  id        String   @id @default(cuid())
  userId    String   // ID do usuário (client ou admin)
  userType  UserType // CLIENT ou ADMIN
  title     String
  message   String   @db.Text
  type      String   // INFO, WARNING, ERROR, SUCCESS
  isRead    Boolean  @default(false)
  data      Json?    // Dados adicionais
  createdAt DateTime @default(now())

  @@index([userId, userType])
  @@index([isRead])
  @@index([createdAt])
  @@index([type])
  @@map("notifications")
}

// Modelo para upload de arquivos
model FileUpload {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  path         String
  url          String?
  uploadedBy   String   // ID do usuário
  uploadedByType String // CLIENT ou ADMIN
  relatedType  String?  // TICKET, MESSAGE, etc.
  relatedId    String?  // ID do recurso relacionado
  createdAt    DateTime @default(now())

  @@index([uploadedBy])
  @@index([relatedType, relatedId])
  @@index([mimeType])
  @@index([createdAt])
  @@map("file_uploads")
}

enum ConversationStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum MessageType {
  TEXT
  OPTION
  LEAD_CAPTURE
  FILE
  IMAGE
}

enum ContactStatus {
  PENDING
  REVIEWED
  RESPONDED
  ARCHIVED
}

enum TicketStatus {
  ABERTO
  EM_ANDAMENTO
  AGUARDANDO_CLIENTE
  RESOLVIDO
  FECHADO
}

enum Priority {
  BAIXA
  MEDIA
  ALTA
  URGENTE
}

enum UserType {
  CLIENT
  ADMIN
}
